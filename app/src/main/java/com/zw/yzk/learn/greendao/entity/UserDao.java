package com.zw.yzk.learn.greendao.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zw.yzk.learn.greendao.IntegerConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property UserId = new Property(3, int.class, "userId", false, "USER_ID");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Login = new Property(7, boolean.class, "login", false, "LOGIN");
        public final static Property CollectId = new Property(8, String.class, "collectId", false, "COLLECT_ID");
    }

    private final IntegerConverter collectIdConverter = new IntegerConverter();

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EMAIL\" TEXT," + // 1: email
                "\"ICON\" TEXT," + // 2: icon
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: userId
                "\"PASSWORD\" TEXT," + // 4: password
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"LOGIN\" INTEGER NOT NULL ," + // 7: login
                "\"COLLECT_ID\" TEXT);"); // 8: collectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
        stmt.bindLong(4, entity.getUserId());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getLogin() ? 1L: 0L);
 
        List collectId = entity.getCollectId();
        if (collectId != null) {
            stmt.bindString(9, collectIdConverter.convertToDatabaseValue(collectId));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
        stmt.bindLong(4, entity.getUserId());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getLogin() ? 1L: 0L);
 
        List collectId = entity.getCollectId();
        if (collectId != null) {
            stmt.bindString(9, collectIdConverter.convertToDatabaseValue(collectId));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.getInt(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.getInt(offset + 6), // type
            cursor.getShort(offset + 7) != 0, // login
            cursor.isNull(offset + 8) ? null : collectIdConverter.convertToEntityProperty(cursor.getString(offset + 8)) // collectId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.getInt(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setLogin(cursor.getShort(offset + 7) != 0);
        entity.setCollectId(cursor.isNull(offset + 8) ? null : collectIdConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
